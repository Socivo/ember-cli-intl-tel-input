/**
 * Created by sanketsharma on 2017/04/22.
 */
import TextField from '@ember/component/text-field';
import layout from '../templates/components/intl-tel-input';
import { run } from '@ember/runloop';
import { computed } from '@ember/object';

const intlTelInputUtils = window ? window.intlTelInputUtils : null;
const intlTelInput = window ? window.intlTelInput : null;

let excludeCountries = [];
let onlyCountries = [];
let preferredCountries = ['us', 'gb'];

export default TextField.extend({
  layout,
  tagName: 'input',
  attributeBindings: ['type'],
  type: 'tel',

  /**
   * Whether or not to allow the dropdown. If disabled, there is no dropdown
   * arrow, and the selected flag is not clickable. Also we display the selected
   * flag on the right instead because it is just a marker of state.
   *
   * @property allowDropdown
   * @type Boolean
   * @default true
   */

  allowDropdown: true,


  /**
   * When `autoFormat` is enabled, this option will support formatting
   * extension numbers e.g. "+1 (702) 123-1234 ext. 12345".
   *
   * @property allowExtensions
   * @type Boolean
   * @default false
   */
  allowExtensions: false,



  /**
   * If there is just a dial code in the input: remove it on blur, and re-add
   * it on focus. This is to prevent just a dial code getting submitted with
   * the form. Requires `nationalMode` to be set to `false`.
   *
   * @property autoHideDialCode
   * @type Boolean
   * @default true
   */
  autoHideDialCode: true,

  /**
   * Set the input's placeholder to an example number for the selected country,
   * and update it if the country changes. You can specify the number type using the
   * placeholderNumberType option. By default it is set to "polite", which means it
   * will only set the placeholder if the input doesn't already have one. You can also
   * set it to "aggressive", which will replace any existing placeholder, or "off".
   * Requires the utilsScript option.
   *
   * @property autoPlaceholder
   * @type String
   * @default true
   */
  autoPlaceholder: 'polite',


  /**
   * Change the placeholder generated by autoPlaceholder. Must return a string.
   * customPlaceholder: function(selectedCountryPlaceholder, selectedCountryData) {
   *   return "e.g. " + selectedCountryPlaceholder;
   *  }
   * @property customPlaceHolder
   * @type String
   * @default true
   */


  customPlaceHolder: undefined,



  /**
  * Type: String Default: ""
  * Expects a jQuery selector e.g. "body". Instead of putting the country dropdown next
  * to the input, append it to the element specified, and it will then be positioned
  * absolutely next to the input using JavaScript. This is useful when the input is
  * inside a container with overflow: hidden. Note that the absolute positioning can
  * be broken by scrolling, so it will automatically close on the window scroll event.
  * If you have a different scrolling element that is causing problems, simply listen
  * for the scroll event on that element, and trigger $(window).scroll() e.g.
  *
  * @property dropdownContainer
  * @type String
  * @default ''
  **/

  dropdownContainer: '',

  /**
   * Set the initial country selection by specifying it's country code.
   * You can also set it to "auto", which will lookup the user's country based on their IP address
   * (requires the geoIpLookup option - see example).
   * Note that the "auto" option will not update the country selection if the input already contains a number.
   * If you leave initialCountry blank, it will default to the first country in the list.
   *
   * @property initialCountry
   * @type String
   * @default ""
   */
  initialCountry: '',


  /**
   * Add a hidden input with the given name, and on submit, populate it with the full
   * international number (using getNumber). This is a quick way for people using non-ajax forms to get
   * the full international number, even when nationalMode is enabled. Note: requires the main telephone input
   * to be inside a form element, as this feature works by listening for the submit event on the closest form element.
   *
   * @property hiddenInput
   * @type String
   * @default ""
   */
  hiddenInput: '',



  /**
   * Don't display the countries you specify.
   *
   * @property excludeCountries
   * @type Array
   * @default empty
   */
   excludeCountries,



  /**
   * When setting `defaultCountry` to `"auto"`, we need to use a special
   * service to lookup the location data for the user. Write a custom method to
   * get the country code.
   *
   * @property geoIpLookup
   * @type Function
   * @default null
   */
  geoIpLookup: null,

  /**
   * Format the input value (according to the nationalMode option) during
   * initialisation, and on setNumber. Requires the utilsScript option.
   *
   * @property formatOnDisplay
   * @type Boolean
   * @default true
   */
  formatOnDisplay: true,


  /**
   * Specify one of the keys from the global enum intlTelInputUtils.numberType e.g.
   * "FIXED_LINE" to set the number type to use for the placeholder.
   *
   * @property placeholderNumberType
   * @type String
   * @default 'MOBILE'
   */
  placeholderNumberType: 'MOBILE',



  /**
   * Display the country dial code next to the selected flag so it's not part
   * of the typed number. Note that this will disable nationalMode because technically
   * we are dealing with international numbers, but with the dial code separated.
   *
   * @property separateDialCode
   * @type Boolea
   * @default false
   */
  separateDialCode: false,


  /**
   * Allow users to enter national numbers (and not have to think about
   * international dial codes). Formatting, validation and placeholders still
   * work. Then you can use `getNumber` to extract a full international
   * number - [see example](http://jackocnr.com/lib/intl-tel-input/examples/gen/national-mode.html).
   * This option now defaults to `true`, and it is recommended that you leave it
   * that way as it provides a better experience for the user.
   *
   * @property nationalMode
   * @type Boolean
   * @default true
   */
  nationalMode: true,

  /**
   * Gets the type of the current `number`. Setting `numberType` when `value`
   * is empty and no custom placeholder is set will affect the format of the
   * auto placeholder. Requires the utilities script.
   *
   * Supported values:
   * - "FIXED_LINE"
   * - "MOBILE"
   * - "FIXED_LINE_OR_MOBILE"
   * - "TOLL_FREE"
   * - "PREMIUM_RATE"
   * - "SHARED_COST"
   * - "VOIP"
   * - "PERSONAL_NUMBER"
   * - "PAGER"
   * - "UAN"
   * - "VOICEMAIL"
   * - "UNKNOWN"
   *
   * @property numberType
   * @type String
   * @default "MOBILE"
   */
  numberType: computed('number', {
    get() {
      if (this.get('hasUtilsScript') && this.itl) {
        let typeNumber = this.itl.getNumberType();
        for (let key in intlTelInputUtils.numberType) {
          if (intlTelInputUtils.numberType[key] === typeNumber) {
            return key;
          }
        }

      }

      return 'MOBILE';
    },
    set(key, newValue) {
      if (this.get('hasUtilsScript') && newValue in intlTelInputUtils.numberType) {
        return newValue;
      }

      return 'MOBILE';
    }
  }),

  /**
   * Display only the countries you specify - [see example](http://jackocnr.com/lib/intl-tel-input/examples/gen/only-countries-europe.html).
   *
   * @property onlyCountries
   * @type Array
   * @default "MOBILE"
   */
  onlyCountries,

  /**
   * Specify the countries to appear at the top of the list.
   *
   * @property preferredCountries
   * @type Array
   * @default ["us", "gb"]
   */
  preferredCountries,

  /**
   * Specify the format of the `number` property. Requires the utilities
   * script.
   *
   * Supported values:
   * - "E164"          e.g. "+41446681800"
   * - "INTERNATIONAL" e.g. "+41 44 668 1800"
   * - "NATIONAL"      e.g. "044 668 1800"
   * - "RFC3966"       e.g. "tel:+41-44-668-1800"
   *
   * @property numberFormat
   * @type String
   * @default 'E164'
   */
  _numberFormat: 'E164',
  numberFormat: computed('value', {
    get() {
      return this.get('_numberFormat');
    },
    set(key, newValue) {
      if (this.get('hasUtilsScript') && newValue in intlTelInputUtils.numberFormat) {
        this.set('_numberFormat', newValue);
      }

      return this.get('_numberFormat');
    }
  }),

  /**
   * Get the current number in the format specified by the `numberFormat`
   * property. Note that even if `nationalMode` is enabled, this can still
   * return a full international number. Requires the utilities script.
   *
   * @property number
   * @type String
   * @readOnly
   */
  number: computed('value', 'numberFormat', {
    get() {
      if (this.get('hasUtilsScript')) {
        let numberFormat = intlTelInputUtils.numberFormat[this.get('numberFormat')];
        return this.itl.getNumber(numberFormat);
      }
    },
    set(key, newValue) {
      if (this.get('hasUtilsScript') && newValue) {
        if (this.element) {
          this.itl.setNumber(newValue);
        } else {
          // It's possible the component isn't in the DOM yet
          run.schedule('afterRender', () => {
            this.itl.setNumber(newValue);
          });
        }
      }
    }
  }),

  /**
   * Get the extension part of the current number, so if the number was
   * "+1 (702) 123-1234 ext. 12345" this would return "12345".
   *
   * @property extension
   * @type String
   * @readOnly
   */
  extension: computed('number', {
    get() {
      return this.itl.getExtension();
    },
    set() { /* no-op */ }
  }),

  /**
   * Get the country data for the currently selected flag.
   *
   * @property selectedCountryData
   * @type Object
   * @readOnly
   */
  selectedCountryData: computed('value', {
    get() {
      return this.itl.getSelectedCountryData();
    },
    set() { /* no-op */ }
  }),

  /**
   * Get the validity of the current `number`.
   *
   * @property isValidNumber
   * @type Boolean
   * @readOnly
   */
  isValidNumber: computed('number', {
    get() {
      return this.itl.isValidNumber();
    },
    set() { /* no-op */ }
  }),

  /**
   * Get more information about a validation error. Requires the utilities
   * scripts.
   *
   * @property isValidNumber
   * @type String
   * @readOnly
   */
  validationError: computed('number', {
    get() {
      if (this.get('hasUtilsScript')) {
        let errorNumber = this.itl.getValidationError();
        for (let key in intlTelInputUtils.validationError) {
          if (intlTelInputUtils.validationError[key] === errorNumber) {
            return key;
          }
        }
      }
    },
    set() { /* no-op */ }
  }),

  /**
   * Returns whether the untilities script presents.
   *
   * @property hasUtilsScript
   * @type Boolean
   * @readOnly
   */
  hasUtilsScript: computed({
    get() {
      return (typeof intlTelInputUtils !== 'undefined');
    },
    set() { /* no-op */ }
  }),

  /**
   * Initiate the intlTelInput instance.
   *
   * @method didInsertElement
   */
  didInsertElement() {
    let input = this.element;
    let notifyPropertyChange = this.notifyPropertyChange.bind(this, 'value');

    // let Ember be aware of the changes
    input.addEventListener('change', notifyPropertyChange);

    let itl = intlTelInput(input, {
      allowDropdown: this.get('allowDropdown'),
      autoHideDialCode: this.get('autoHideDialCode'),
      autoPlaceholder: this.get('autoPlaceholder'),
      customPlaceholder: this.get('customPlaceholder'),
      dropdownContainer: this.get('dropdownContainer'),
      initialCountry: this.get('initialCountry'),
      hiddenInput: this.get('hiddenInput'),
      excludeCountries: this.get('excludeCountries'),
      geoIpLookup: this.get('geoIpLookup'),
      formatOnDisplay: this.get('formatOnDisplay'),
      placeholderNumberType: this.get('placeholderNumberType'),
      separateDialCode: this.get('separateDialCode'),
      nationalMode: this.get('nationalMode'),
      onlyCountries: this.get('onlyCountries'),
      preferredCountries: this.get('preferredCountries'),
      numberType: this.get('numberType')
    });

    this.set('itl', itl);
  },

  /**
   * Destroy the intlTelInput instance.
   *
   * @method willDestroyElement
   */
  willDestroyElement() {
    this.itl.destroy();
  }
});
